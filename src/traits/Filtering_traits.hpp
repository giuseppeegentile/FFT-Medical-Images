

constexpr double gauss_normal[9] = {1./16., 2./16.,1./16., 
                                    2./16.,4./16.,2./16.,
                                    1./16., 2./16.,1./16.};
constexpr double gauss_std_five[225] = {0.0008967325586281263 , 
0.001162999434977595 , 
0.0014491865336118527 , 
0.0017349912804424188 , 
0.0019957150111386663 , 
0.002205606191077471 , 
0.0023419932609727665 , 
0.002389304663178048 , 
0.0023419932609727665 , 
0.002205606191077471 , 
0.0019957150111386663 , 
0.0017349912804424188 , 
0.0014491865336118527 , 
0.001162999434977595 , 
0.0008967325586281263 , 

0.001162999434977595 , 
0.001508328957997736 , 
0.0018794936166320897 , 
0.002250162391708545 , 
0.0025883028423562522 , 
0.002860517028544667 , 
0.0030374015229240633 , 
0.0030987611038864387 , 
0.0030374015229240633 , 
0.002860517028544667 , 
0.0025883028423562522 , 
0.002250162391708545 , 
0.0018794936166320897 , 
0.001508328957997736 , 
0.001162999434977595 , 

0.0014491865336118527 , 
0.0018794936166320897 , 
0.0023419932609727665 , 
0.002803874996350865 , 
0.003225223943573303 , 
0.0035644237067184686 , 
0.003784835359166349 , 
0.0038612941052021564 , 
0.003784835359166349 , 
0.0035644237067184686 , 
0.003225223943573303 , 
0.002803874996350865 , 
0.0023419932609727665 , 
0.0018794936166320897 , 
0.0014491865336118527 , 

0.0017349912804424188 , 
0.002250162391708545 , 
0.002803874996350865 , 
0.0033568478296543574 , 
0.0038612941052021564 , 
0.004267389951206353 , 
0.004531270608551324 , 
0.004622808346867915 , 
0.004531270608551324 , 
0.004267389951206353 , 
0.0038612941052021564 , 
0.0033568478296543574 , 
0.002803874996350865 , 
0.002250162391708545 , 
0.0017349912804424188 , 

0.0019957150111386663 , 
0.0025883028423562522 , 
0.003225223943573303 , 
0.0038612941052021564 , 
0.004441545438895902 , 
0.0049086668503792895 , 
0.0052122018565484325 , 
0.005317495318540655 , 
0.0052122018565484325 , 
0.0049086668503792895 , 
0.004441545438895902 , 
0.0038612941052021564 , 
0.003225223943573303 , 
0.0025883028423562522 , 
0.0019957150111386663 , 

0.002205606191077471 , 
0.002860517028544667 , 
0.0035644237067184686 , 
0.004267389951206353 , 
0.0049086668503792895 , 
0.005424915849561177 , 
0.005760373910997226 , 
0.005876741183054534 , 
0.005760373910997226 , 
0.005424915849561177 , 
0.0049086668503792895 , 
0.004267389951206353 , 
0.0035644237067184686 , 
0.002860517028544667 , 
0.002205606191077471 , 

0.0023419932609727665 , 
0.0030374015229240633 , 
0.003784835359166349 , 
0.004531270608551324 , 
0.0052122018565484325 , 
0.005760373910997226 , 
0.006116575540463281 , 
0.006240138562755518 , 
0.006116575540463281 , 
0.005760373910997226 , 
0.0052122018565484325 , 
0.004531270608551324 , 
0.003784835359166349 , 
0.0030374015229240633 , 
0.0023419932609727665 , 

0.002389304663178048 , 
0.0030987611038864387 , 
0.0038612941052021564 , 
0.004622808346867915 , 
0.005317495318540655 , 
0.005876741183054534 , 
0.006240138562755518 , 
0.006366197723675813 , 
0.006240138562755518 , 
0.005876741183054534 , 
0.005317495318540655 , 
0.004622808346867915 , 
0.0038612941052021564 , 
0.0030987611038864387 , 
0.002389304663178048 , 

0.0023419932609727665 , 
0.0030374015229240633 , 
0.003784835359166349 , 
0.004531270608551324 , 
0.0052122018565484325 , 
0.005760373910997226 , 
0.006116575540463281 , 
0.006240138562755518 , 
0.006116575540463281 , 
0.005760373910997226 , 
0.0052122018565484325 , 
0.004531270608551324 , 
0.003784835359166349 , 
0.0030374015229240633 , 
0.0023419932609727665 , 

0.002205606191077471 , 
0.002860517028544667 , 
0.0035644237067184686 , 
0.004267389951206353 , 
0.0049086668503792895 , 
0.005424915849561177 , 
0.005760373910997226 , 
0.005876741183054534 , 
0.005760373910997226 , 
0.005424915849561177 , 
0.0049086668503792895 , 
0.004267389951206353 , 
0.0035644237067184686 , 
0.002860517028544667 , 
0.002205606191077471 , 

0.0019957150111386663 , 
0.0025883028423562522 , 
0.003225223943573303 , 
0.0038612941052021564 , 
0.004441545438895902 , 
0.0049086668503792895 , 
0.0052122018565484325 , 
0.005317495318540655 , 
0.0052122018565484325 , 
0.0049086668503792895 , 
0.004441545438895902 , 
0.0038612941052021564 , 
0.003225223943573303 , 
0.0025883028423562522 , 
0.0019957150111386663 , 

0.0017349912804424188 , 
0.002250162391708545 , 
0.002803874996350865 , 
0.0033568478296543574 , 
0.0038612941052021564 , 
0.004267389951206353 , 
0.004531270608551324 , 
0.004622808346867915 , 
0.004531270608551324 , 
0.004267389951206353 , 
0.0038612941052021564 , 
0.0033568478296543574 , 
0.002803874996350865 , 
0.002250162391708545 , 
0.0017349912804424188 , 

0.0014491865336118527 , 
0.0018794936166320897 , 
0.0023419932609727665 , 
0.002803874996350865 , 
0.003225223943573303 , 
0.0035644237067184686 , 
0.003784835359166349 , 
0.0038612941052021564 , 
0.003784835359166349 , 
0.0035644237067184686 , 
0.003225223943573303 , 
0.002803874996350865 , 
0.0023419932609727665 , 
0.0018794936166320897 , 
0.0014491865336118527 , 

0.001162999434977595 , 
0.001508328957997736 , 
0.0018794936166320897 , 
0.002250162391708545 , 
0.0025883028423562522 , 
0.002860517028544667 , 
0.0030374015229240633 , 
0.0030987611038864387 , 
0.0030374015229240633 , 
0.002860517028544667 , 
0.0025883028423562522 , 
0.002250162391708545 , 
0.0018794936166320897 , 
0.001508328957997736 , 
0.001162999434977595 , 

0.0008967325586281263 , 
0.001162999434977595 , 
0.0014491865336118527 , 
0.0017349912804424188 , 
0.0019957150111386663 , 
0.002205606191077471 , 
0.0023419932609727665 , 
0.002389304663178048 , 
0.0023419932609727665 , 
0.002205606191077471 , 
0.0019957150111386663 , 
0.0017349912804424188 , 
0.0014491865336118527 , 
0.001162999434977595 , 
0.0008967325586281263 , 
};


constexpr size_t gauss_normal_size = 3;
constexpr size_t gauss_five_size = 15;



constexpr double sobel_kernel_x[9] = {-1, 0, 1, 
                                      -2, 0 ,2,
                                      -1, 0, 1};


constexpr double sobel_kernel_y[9] = {-1, -2, -1, 
                                       0, 0 ,0,
                                       1, 2, 1};

constexpr uint8_t channel_num = 2;     

constexpr int medical_img_size = 256;

constexpr int kuwahara_kernel_size = 5;

constexpr auto define_pad = [](const int kk_size) -> int {
    for(int i = 0; i < kk_size; i++){
        if( ! ((medical_img_size + i ) % kk_size)) return i;
    }
};

constexpr int kuwahara_pad = define_pad(kuwahara_kernel_size);

constexpr auto get_indexes = [](int center_indexes[]) -> int* {
    /*
    for(int i = kuwahara_kernel_size/2; i < borders; i++){
        for(int j = kuwahara_kernel_size / 2; j < borders; j+=kuwahara_kernel_size){
            center_indexes[(i -  kuwahara_kernel_size/2) * borders + j -  kuwahara_kernel_size/2] = (kuwahara_kernel_size / 2) * (medical_img_size + kuwahara_pad) + j+ kuwahara_kernel_size / 2;            
        }
    }
    return center_indexes;*/
    const int borders =  (medical_img_size + kuwahara_pad) / kuwahara_kernel_size;
    for(int i = 0; i < borders; i++){
        for(int j = 0, k = kuwahara_kernel_size / 2; j < borders; j++, k += kuwahara_kernel_size){
            center_indexes[i * borders + j] = (i + kuwahara_kernel_size / 2) * medical_img_size + k;
        }
        if(borders - 1 == i) std::cout << (borders-1) * (borders-1) + (borders-1) << std::endl;
    }
    return center_indexes;
};





